steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--build-arg'
      - 'VITE_API_URL=https://api.find-tradespeople.com'
      - '--build-arg'
      - 'VITE_STRIPE_PUBLIC_KEY=${_STRIPE_PUBLIC_KEY}'
      - '-t'
      - 'europe-west1-docker.pkg.dev/regal-framework-475315-m1/docker-repo/ub-travel-services-frontend:${SHORT_SHA}'
      - '-t'
      - 'europe-west1-docker.pkg.dev/regal-framework-475315-m1/docker-repo/ub-travel-services-frontend:latest'
      - '.'
    id: 'build-image'

  # Step 2: Push both tags to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - 'europe-west1-docker.pkg.dev/regal-framework-475315-m1/docker-repo/ub-travel-services-frontend'
    id: 'push-images'
    waitFor: ['build-image']

  # Step 3: Clone the Terraform infrastructure repository
  - name: 'gcr.io/cloud-builders/git'
    secretEnv: ['GITHUB_TOKEN']
    entrypoint: 'bash'
    args:
      - -c
      - |
        git clone https://$$GITHUB_TOKEN@github.com/HristevMartin/constructionPlatformInfra.git /workspace/infra
    id: 'clone-infra-repo'

  # Step 4: Configure git
  - name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - -c
      - |
        cd /workspace/infra
        git config user.email "cloudbuild@gcp.com"
        git config user.name "Cloud Build"
    id: 'configure-git'
    waitFor: ['clone-infra-repo']

  # Step 5: Debug - List directory structure
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -c
      - |
        echo "=== Listing /workspace/infra structure ==="
        ls -la /workspace/infra/
        echo ""
        echo "=== Looking for terraform.tfvars files ==="
        find /workspace/infra -name "terraform.tfvars" -type f
        echo ""
        echo "=== Directory tree ==="
        find /workspace/infra -type d | head -20
    id: 'debug-structure'
    waitFor: ['configure-git', 'push-images']

  # Step 6: Create terraform.tfvars with new image
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -c
      - |
        cd /workspace/infra/prod
        
        # Create terraform.tfvars with all required variables
        NEW_IMAGE="europe-west1-docker.pkg.dev/regal-framework-475315-m1/docker-repo/ub-travel-services-frontend:${SHORT_SHA}"
        
        cat > terraform.tfvars <<EOF
        project_id                     = "regal-framework-475315-m1"
        region                         = "europe-west1"
        mongo_region                   = "europe-west1"
        frontend_simple_image_name     = "$$NEW_IMAGE"
        backend_image_name             = "europe-west1-docker.pkg.dev/regal-framework-475315-m1/docker-repo/ub-travel-services-backend:v-fd4ee42-1760800964"
        secret_key                     = "dummy-value-not-used-for-frontend"
        sendgrid_api_key               = "dummy-value-not-used-for-frontend"
        stripe_secret_key              = "dummy-value-not-used-for-frontend"
        OPENAI_API_KEY                 = "dummy-value-not-used-for-frontend"
        EOF
        
        echo "=== Created terraform.tfvars ==="
        echo "Frontend image: $$NEW_IMAGE"
        cat terraform.tfvars
    id: 'create-terraform-vars'
    waitFor: ['debug-structure']

  # Step 7: Initialize Terraform
  - name: 'hashicorp/terraform:1.6'
    entrypoint: 'sh'
    args:
      - -c
      - |
        cd /workspace/infra/prod
        terraform init -input=false
    id: 'terraform-init'
    waitFor: ['create-terraform-vars']

  # Step 8: Validate Terraform
  - name: 'hashicorp/terraform:1.6'
    entrypoint: 'sh'
    args:
      - -c
      - |
        cd /workspace/infra/prod
        terraform validate
    id: 'terraform-validate'
    waitFor: ['terraform-init']

  # Step 9: Plan Terraform changes
  - name: 'hashicorp/terraform:1.6'
    entrypoint: 'sh'
    args:
      - -c
      - |
        cd /workspace/infra/prod
        terraform plan -target=module.frontend_simple -out=tfplan -input=false
        echo "=== Terraform Plan Summary ==="
        terraform show -no-color tfplan
    id: 'terraform-plan'
    waitFor: ['terraform-validate']

  # Step 10: Apply Terraform changes (deploy to Cloud Run)
  - name: 'hashicorp/terraform:1.6'
    entrypoint: 'sh'
    args:
      - -c
      - |
        cd /workspace/infra/prod
        terraform apply -auto-approve -input=false tfplan
        echo "=== Deployment Complete ==="
        terraform output -json
    id: 'terraform-apply'
    waitFor: ['terraform-plan']

  # Step 11: Verify deployment
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - -c
      - |
        echo "=== Cloud Run Service Status ==="
        gcloud run services describe trade-harmony-frontend-simple \
          --region=europe-west1 \
          --format="table(status.url,status.conditions[0].type,status.conditions[0].status)"
    id: 'verify-deployment'
    waitFor: ['terraform-apply']

# Use Secret Manager for GitHub token
availableSecrets:
  secretManager:
    - versionName: projects/regal-framework-475315-m1/secrets/github-token/versions/latest
      env: 'GITHUB_TOKEN'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

timeout: '1800s'